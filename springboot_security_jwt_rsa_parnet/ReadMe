Springboot+springSecurity+jwt分布式整合

JWT生成的token由三部分组成
    头部：主要设置一些规范信息，签名部分的编码格式就在头部中声明
    载荷：token中存放有效信息的部分，比如用户名，用户角色，过期时间等，但是不要放密码，会泄露
    签名：将头部与载荷分别采用base64编码后，用"."相连，再加入盐，最后使用头部声明编码类型进行编码，就得到了签名

JWT生成token的安全性分析
    从JWT生成的token组成上来看，要想避免token被伪造，主要就得看签名部分了，而签名部分又有三部分组成，其中头部和截荷的base64编码，几乎是透明的，毫无安全性可言，那么最终守护token安全的重担就落在了加入的盐上面了

非对称加密RSA介绍
    基本原理：同时生成两把密钥，私钥和公钥，私钥隐秘保存，公钥可以下发给信任的客户端
        私钥加密，持有私钥或公钥才可以解密
        公钥加密，持有私钥才可解密
    优点：安全，难以破解
    缺点：算法比较耗时，为了安全，可以授受

单点登录的实现分两大环节：
    用户认证：这一环节主要是用户向认证服务器发起认证请求，认证服务器给用户返回一个成功的令牌token，主要在认证服务器中完成
    身份校验：这一环节是用户携带token去访问其他服务器时，在其他服务器中要对token的真伪进行检验，主要在资源服务器中完成

分析分布式认证流程
    用户认证：
        由于，分布式项目，多数是前后端分离的架构设计，要满足可以授受异步Post的认证请求参数，需要修改UsernamePasswordAuthenticationFilter过滤器中attemptAuthentication方法，让其能够请收请求体。
        另外，默认successfulAuthentication方法在认证通过后，是把用户信息直接放入session就完事了，现在需要修改这个方法，在认证通过后生成token并返回给用户。
    身份校验：
        原来BasicAuthenticationFilter过滤器中doFilterInternal方法校验用户是否登录，就是看session中是否有用户信息，要修改为，验证用户携带的token是否合法，并解析出用户信息，交给springSecurity以便于后后续的授权功能可以正常使用
        
        
POST请求：http://localhost:9001/login
Body
	raw JSON
{
	"username": "xiaoming",
	"password": "123456"
}
Headers返回
	Authorization Bearer 令牌

GET请求：http://localhost:9001/product/findAll
Header
	Authorization Bearer 令牌
	
GET请求：http://localhost:9002/product/findAll
Header
	Authorization Bearer 令牌
	